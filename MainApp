
package thainp;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.xml.stream.XMLStreamException;
/*
 * 2019/05/27	Khoa 
 * 		Retry処理を追加
 * */
public class MainApp {
	
	
	public static void main(String[] args) {
		
		// 変数
		String configServerPath				= args[0];
		String currDir						= System.getProperty("user.dir") + File.separatorChar;//File.separatorChar: dấu '\'
		String sqlFile						= null;
		String srvName 						= null;
		String linkSrvName 					= null;
		String srvField 					= null;
		String dbName 						= null;
		String linkDbName 					= null;
		String usrName 						= null;
		String usrPass 						= null;
		String csvFile 						= null;
		String logFile						= null;
		String csvFolder 					= null;
		String zipFolder 					= null;
		String logFolder					= null;
		String SMTPSrv 						= null;
		String fromAddr 					= null;
		String toAddr 						= null;
		String sqlStatement 				= null;
		String taskTime						= null;
		String startTime					= null;
		String lastTime 					= null; // 前回の記録した抽出時間
		String updateSQL					= null; // 管理サーバに更新
		// ADD: 2019/05/27 - START
		int iMaxRetry = 3;	//トライ最大回数 
		int iRetry = 0;		//トライ回数
		int iDelayRetry = 1;//リトライの間にスリープする秒数
		boolean bErrorFlag = false;
		// ADD: 2019/05/27 - END
		
		// 時間のフォーマット
		final String[] DATE_FORMAT_STRINGS 	= {"yyyyMMddHHmmss", "yyyy/MM/dd HH:mm:ss"};
		SimpleDateFormat frmFileNameDate 	= new SimpleDateFormat(DATE_FORMAT_STRINGS[0]);
		SimpleDateFormat frmLogTime 		= new SimpleDateFormat(DATE_FORMAT_STRINGS[1]);	// yyyy/MM/dd HH:mm:ss
		
		List<String> fileNames 				= new ArrayList<>();
		List<String> conditionTypes 		= new ArrayList<>();
		List<String> sqlStatements 			= new ArrayList<>();
		
		WriteFile wrFile 					= new WriteFile();
		ConnectDB DBconn					= null;
		ResultSet rs = null;
		boolean todayExecStatus 			= true; // 本日実行するかどうかチェック		
		
		String dailyDate = frmLogTime.format(new Date()).substring(0,10); // 本日のフォーマット　yyyy/mm/dd　得る
		
		// SQL設定XMLファイル取得
		String strSQL = "SELECT bqsr_sql_file FROM bq_server_master WHERE bqsr_server_name = '" + configServerPath + "'";
		
		try {				
			
			// XMLファイルからDBとSQL情報得る
			ReadXML serverInfo = new ReadXML(currDir + configServerPath, "server_info.xml");			
			srvName 		= serverInfo.getDataByTag("serverName");
			linkSrvName 	= serverInfo.getDataByTag("linkSrvName");
			srvField		= serverInfo.getDataByTag("srvField");
			dbName 			= serverInfo.getDataByTag("dbName");
			linkDbName 		= serverInfo.getDataByTag("linkDbName");
			usrName			= serverInfo.getDataByTag("userName");
			usrPass			= serverInfo.getDataByTag("userPass");
			
			// configファイルから必要な情報得る
			ReadProperties readProperties = new ReadProperties(currDir + "config");
			csvFolder = readProperties.getPropertyData("export_csv_folder") + File.separatorChar + configServerPath; // CSVのフォルダ
			zipFolder = readProperties.getPropertyData("export_zip_folder") + File.separatorChar + configServerPath; // 圧縮のフォルダ
			logFolder = readProperties.getPropertyData("log_folder") + File.separatorChar + configServerPath; // ログのフォルダ
			SMTPSrv   = readProperties.getPropertyData("smtp_server"); // SMTPサーバ
			fromAddr  = readProperties.getPropertyData("send_addr"); // 送りメール
			toAddr    = readProperties.getPropertyData("to_addr"); // 
			String exec_time_ago = readProperties.getPropertyData("minutes_ago"); // タスクスケジューラの時間
			int convertTime = Integer.parseInt(exec_time_ago);
			// ADD: 2019/05/27 - START
			iMaxRetry = Integer.parseInt(readProperties.getPropertyData("max_retry"));
			iDelayRetry = Integer.parseInt(readProperties.getPropertyData("delay_retry")) * 1000;
			// ADD: 2019/05/27 - END
			// DBに接続初期
			DBconn = new ConnectDB(srvName, dbName, usrName, usrPass);
			
			DBconn.selectData(strSQL);
			rs = DBconn.getResultSet();
			
			while ( rs.next() ) {
				sqlFile = rs.getString(1);
			}
			rs.close();		//追加：2018/1/19 - タイムアウト処理
			ReadXML	sqlInfo	   = new ReadXML(currDir + "config", sqlFile);
			
			fileNames 		= sqlInfo.getDataByTags("fileName");
			conditionTypes	= sqlInfo.getDataByTags("conditionType");
			sqlStatements 	= sqlInfo.getDataByTags("sqlStatement");
			
			// 各CSVファイルに対してSQL文得る
			for ( String fileName : fileNames ) {				
				
				csvFile = fileName + "_" + frmFileNameDate.format(new Date());				
				int posIndex = fileNames.indexOf(fileName);
				sqlStatement = sqlStatements.get(posIndex);
				
				// 各XMLのSQL文のパラメータを変更
				sqlStatement = sqlStatement.replaceAll("srvField", srvField);
				sqlStatement = sqlStatement.replaceAll("linkSrvName", linkSrvName);
				sqlStatement = sqlStatement.replaceAll("linkDbName", linkDbName);
				sqlStatement = sqlStatement.replaceAll("dbName", dbName);
				
				Byte conditionType = Byte.valueOf(conditionTypes.get(posIndex));				
				logFile = fileName + "_" + frmFileNameDate.format(new Date());
				
				taskTime = frmLogTime.format(new Date(System.currentTimeMillis() - convertTime * 60 * 1000)); // yyyy/MM/dd HH:mm:ss
				taskTime = taskTime.substring(0, taskTime.length()-2) + "00";//追加：2017/11/13 - 「00」に秒が修正される。
				//String yesterday = frmLogTime.format(new Date(System.currentTimeMillis() - 1000 * 60 * 60 * 24)); // yyyy/MM/dd HH:mm:ss			
				
				// 前回抽出済対象を得る
				// UPDATE: 2019/05/27 - bqlg_to_time参照にWITH(NOLOCK)を追加
				//String lastExecTime = "Select bqlg_to_time FROM bq_exec_logs WHERE bqlg_server_name = '"
				String lastExecTime = "Select bqlg_to_time FROM bq_exec_logs WITH(NOLOCK) WHERE bqlg_server_name = '"
						+ configServerPath + "' AND bqlg_file_name = '" + fileName + "'" 
						+ " AND bqlg_daily_date = '" + dailyDate + "'";
				
				DBconn.selectData(lastExecTime);
				
				rs = DBconn.getResultSet();			
				// ログファイルに記入
				startTime = frmLogTime.format(new Date());
				wrFile.WriteLog2File(logFolder, logFile, startTime + " =====================");
				wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date()) + " 処理開始 " + srvField + " " + fileName);
				// 本日実行しない場合、昨日の実行時間を得る
				if ( !rs.next() ) {
					//　削除：2017/10/13 - Add bq_exec_manage - Start
//					lastExecTime = "Select bqlg_to_time FROM bq_exec_logs WHERE bqlg_server_name = '" 
//							+ configServerPath + "' AND bqlg_file_name = '" + fileName + "'" 
//							+ " AND bqlg_daily_date = '" + yesterday.substring(0,10) + "'";		
					//　削除：2017/10/13 - Add bq_exec_manage - End
					todayExecStatus = false;
				}
				//　追加：2017/10/13 - Add bq_exec_manage - Start
				// UPDATE: 2019/05/27 - bq_exec_manage参照にWITH(NOLOCK)を追加
				lastExecTime = "Select CONVERT(varchar, [bqem_prev_exec_time], 111) +' '+ CONVERT(varchar, [bqem_prev_exec_time], 108)"
						//+ " FROM bq_exec_manage WHERE bqem_server_name = '" 
						+ " FROM bq_exec_manage WITH(NOLOCK) WHERE bqem_server_name = '" 
						+ configServerPath + "' AND bqem_file_name = '" + fileName + "'" ;
				rs.close();		//追加：2018/1/19 - タイムアウト処理
				DBconn.selectData(lastExecTime);
				rs = DBconn.getResultSet();

				// SQL文に前回抽出済対象を変更
				while(rs.next()) {
					lastTime = rs.getString(1);
				}
				rs.close();	//追加：2018/1/19 - タイムアウト処理
				if ( lastTime == null || "".equals(lastTime) ) {
					updateSQL = "Update bq_exec_logs "
							+ "SET bqlg_proc_status = 8"
							+ " WHERE bqlg_daily_date = '" + dailyDate + "'"
							+ " AND bqlg_server_name = '" + configServerPath + "'"
							+ " AND bqlg_file_name = '" + csvFile.substring(0, csvFile.length() - 15) + "'";
					DBconn.changeData(updateSQL);
					DBconn.closeConnection();
					wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date()) + " 【bq_exec_manage】テーブルのデータがありません。");			
					sendMail(SMTPSrv, fromAddr, toAddr, configServerPath + "で異常エクスポート", fileNames, "下記ファイル名が完了しません：", logFolder);
					return;
				}
				//　追加：2017/10/13 - Add bq_exec_manage - End
				String sExprtDate = "";
				switch( conditionType ) {
					case 0:
						wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date()) + " 抽出範囲：全て");//　追加：2017/11/13 - Add log
						break;
					case 1: 
						sExprtDate = frmFileNameDate.format(new Date()).substring(0, 6);
						sqlStatement = sqlStatement.replaceAll("exprtDate", sExprtDate); 				//yyyyMM
						wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date())
												+ " 抽出範囲：" 	+ sExprtDate.substring(0, 4) + "/"
																+ sExprtDate.substring(4, 6));			//追加：2017/11/13 - Add log
						break;
					case 2:
						sqlStatement = sqlStatement.replaceAll("exprtDate1", lastTime);
						sqlStatement = sqlStatement.replaceAll("exprtDate2", taskTime);
						wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date())
												+ " 抽出範囲：" + lastTime + " ～ " + taskTime);			//追加：2017/11/13 - Add log
						break;
					case 3:
						sExprtDate = frmFileNameDate.format(new Date()).substring(2, 8);
						sqlStatement = sqlStatement.replaceAll("exprtDate", sExprtDate); //yyMMdd
						wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date())
												+ " 抽出範囲：" 	+ sExprtDate.substring(0, 2) + "/" 
																+ sExprtDate.substring(2, 4) + "/" 
																+ sExprtDate.substring(4, 6) );			//追加：2017/11/13 - Add log
						break;
				}				
				// 本日の記録をbq_exec_logsに更新・新記録
				updateSQL = "Update bq_exec_logs "
								+ "Set bqlg_from_time = '" + lastTime + "',"
								+ "bqlg_to_time = '" + taskTime + "',"
								+ " bqlg_start_time = '" + startTime + "',"						
								+ " bqlg_proc_status = 1"								
								+ " WHERE bqlg_daily_date = '" + dailyDate + "'"
								+ " AND bqlg_server_name = '" + configServerPath + "'"
								+ " AND bqlg_file_name = '" + fileName + "'";

				if (!todayExecStatus) {
					updateSQL = "INSERT INTO bq_exec_logs"
								+ "(bqlg_daily_date, "
								+ " bqlg_server_name,"
								+ " bqlg_file_name,"
								+ " bqlg_proc_status,"
								+ " bqlg_from_time,"
								+ " bqlg_to_time,"
								+ " bqlg_start_time)"
								+ " VALUES('" + dailyDate + "',"
								+ " '" + configServerPath + "',"
								+ " '" + fileName + "',"
								+ " 1,"
								+ " '" + lastTime + "',"
								+ " '" + taskTime + "',"
								+ " '" + startTime + "')";												
				}
				// UPDATE: 2019/05/27 - Retryを追加 - START
				iRetry = 0;//初期化
				while (iRetry < iMaxRetry){
					try{
						DBconn.changeData(updateSQL);
						DBconn.closeConnection();	//追加：2018/1/19 - タイムアウト処理
						bErrorFlag = false;	//正常に終了
						break;				//Whileを飛び出す
					}
					catch (SQLException e){
						iRetry++;			//1で足す
						bErrorFlag = true;	//異常に終了
						try {
							Thread.sleep(iDelayRetry);	//秒でDelay(sleep)
						} catch (InterruptedException e1) {
						}
						wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date()) + " "
								+ " 本日の記録をbq_exec_logsに更新・新記録。 システムエラー:"
								+ e.getMessage() + ". Retry: " + iRetry + "回目");
					}
				}
				// UPDATE: 2019/05/27 - Retryを追加 - END
				//　ログファイルに抽出処理記録
				wrFile.WriteLog2File(logFolder, logFile, startTime + " 抽出処理開始");
				// UPDATE: 2019/05/27 - Retryを追加 - START
				if(!bErrorFlag ){
					iRetry = 0;
					while (iRetry < iMaxRetry){
						try{
							DBconn.selectData(sqlStatement);
							DBconn.closeConnection();	//追加：2018/1/19 - タイムアウト処理
							bErrorFlag = false;	//正常に終了
							break;	//Whileを飛び出す
						}
						catch (SQLException e){
							iRetry++;	//1で足す
							bErrorFlag = true;	//異常に終了
							try {
								Thread.sleep(iDelayRetry);	//秒でDelay(sleep)
							} catch (InterruptedException e1) {
							}
							wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date()) + " "
									+ "主なクエリ抽出処理。 システムエラー:"
									+ e.getMessage() + ". Retry: " + iRetry + "回目");
						}
					}
				}
				// UPDATE: 2019/05/27 - Retryを追加 - END
				if(!bErrorFlag ){	// ADD: 2019/05/27 - フラグ追加
					String strEndQuery = frmLogTime.format(new Date());
					wrFile.WriteLog2File(logFolder, logFile, strEndQuery + " 抽出処理完了");
					ResultSet resultSet = DBconn.getResultSet();
	
					//　ログファイルにCSV作成処理記録
					String strStartWriteFile = frmLogTime.format(new Date());
					wrFile.WriteLog2File(logFolder, logFile, strStartWriteFile + " CSV作成開始");
					// CSV作成時間を記録
					//削除：2018/1/19 - タイムアウト処理 - Start
					/*updateSQL = "Update bq_exec_logs "
							+ "Set bqlg_csv_start_time = '" + strStartWriteFile + "'"						
							+ " WHERE bqlg_daily_date = '" + dailyDate + "'"
							+ " AND bqlg_server_name = '" + configServerPath + "'"
							+ " AND bqlg_file_name = '" + fileName + "'";
					DBconn.changeData(updateSQL);*/
					//削除：2018/1/19 - タイムアウト処理- End
				
					wrFile.Write2File(csvFolder, csvFile, resultSet);
	
					resultSet.close();		//追加：2018/1/19 - タイムアウト処理
					String strEndWriteFile = frmLogTime.format(new Date());
					wrFile.WriteLog2File(logFolder, logFile, strEndWriteFile + " CSV作成完了");				
					wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date()) + " CSV作成した件数：　" + wrFile.getRowCount() + "件");
	
					//　ログファイルに圧縮処理記録
					String strStartCompressFile = frmLogTime.format(new Date());				
					wrFile.WriteLog2File(logFolder, logFile, strStartCompressFile + " 圧縮処理開始");
				
					// UPDATE: 2019/05/27 - Retryを追加 - START
					iRetry = 0;
					while (iRetry < iMaxRetry){
						try{
							// CSV作成完了時間を記録
							updateSQL = "Update bq_exec_logs "
									+ "Set bqlg_csv_end_time = '" + strStartCompressFile + "'"		
									+ " ,bqlg_csv_start_time = '" + strStartWriteFile + "'"			//追加：2018/1/19 - タイムアウト処理
									+ " WHERE bqlg_daily_date = '" + dailyDate + "'"
									+ " AND bqlg_server_name = '" + configServerPath + "'"
									+ " AND bqlg_file_name = '" + fileName + "'";
							DBconn.changeData(updateSQL);
							DBconn.closeConnection();
							bErrorFlag = false;
							break;
						}
						catch (SQLException e){
							iRetry++;
							bErrorFlag = true;
							try {
								Thread.sleep(iDelayRetry);
							} catch (InterruptedException e1) {
							}
							wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date()) + " "
									+ "圧縮処理時間更新。 システムエラー:"
									+ e.getMessage() + ". Retry: " + iRetry + "回目");
						}
					}
					// UPDATE: 2019/05/27 - Retryを追加 - END
				}
				if(!bErrorFlag ){	// ADD: 2019/05/27 - フラグ追加
					wrFile.CreateZip(zipFolder, csvFolder, csvFile);
					String strEndCompressFile = frmLogTime.format(new Date());
					wrFile.WriteLog2File(logFolder, logFile, strEndCompressFile + " 圧縮処理終了");
					// DEL: 2019/05/27 - 不要 - START
					//wrFile.WriteLog2File(logFolder, logFile, strEndCompressFile + " 処理終了");				
					//wrFile.WriteLog2File(logFolder, logFile, strEndCompressFile + " =====================");
					// DEL: 2019/05/27 - 不要 - END

					// UPDATE: 2019/05/27 - Retryを追加 - START
					iRetry = 0;
					while (iRetry < iMaxRetry){
						try{
							// bq_exec_logsに更新
							updateSQL = "Update bq_exec_logs "
											+ " Set bqlg_end_time = '" + strEndCompressFile + "',"
											+ " bqlg_proc_status = 3,"
											+ " bqlg_record_count = " + wrFile.getRowCount()
											+ " WHERE bqlg_daily_date = '" + dailyDate + "'"
											+ " AND bqlg_server_name = '" + configServerPath + "'"
											+ " AND bqlg_file_name = '" + fileName + "'";				
							
							DBconn.changeData(updateSQL);
							DBconn.closeConnection();
							bErrorFlag = false;	//正常に終了
							break;				//Whileを飛び出す
						}
						catch (SQLException e){
							iRetry++;			//1で足す
							bErrorFlag = true;	//異常に終了
							try {
								Thread.sleep(iDelayRetry);//秒でDelay(sleep)
							} catch (InterruptedException e1) {
							}
							wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date()) + " "
									+ "CSVエクスポート処理終了時間更新。 システムエラー:"
									+ e.getMessage() + ". Retry: " + iRetry + "回目");
						}
					}
					// UPDATE: 2019/05/27 - Retryを追加 - END
				}

				if(!bErrorFlag ){	// ADD: 2019/05/27 - フラグ追加
					// UPDATE: 2019/05/27 - Retryを追加 - START
					iRetry = 0;
					while (iRetry < iMaxRetry){
						try{
							//　追加：2017/10/13 - Add bq_exec_manage - Start
							// bq_exec_manageに更新
							updateSQL = "Update bq_exec_manage "
											+ "Set bqem_prev_exec_time = '" + taskTime + "'"
											+ " WHERE bqem_server_name = '" + configServerPath + "'"
											+ " AND bqem_file_name = '" + fileName + "'";				
							
							DBconn.changeData(updateSQL);
							DBconn.closeConnection();
							//　追加：2017/10/13 - Add bq_exec_manage - End
							bErrorFlag = false;	//正常に終了
							break;				//Whileを飛び出す
						}
						catch (SQLException e){
							iRetry++;			//1で足す
							bErrorFlag = true;	//異常に終了
							try {
								Thread.sleep( );//秒でDelay(sleep)
							} catch (InterruptedException e1) {
							}
							wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date()) + " "
									+ "bq_exec_manageに更新。 システムエラー:"
									+ e.getMessage() + ". Retry: " + iRetry + "回目");
						}
					}
				}
				// UPDATE: 2019/05/27 - Retryを追加 - END
			}
			
			if(!bErrorFlag ){// ADD: 2019/05/27 - フラグ追加
				String strEndCompressFile = frmLogTime.format(new Date());
				wrFile.WriteLog2File(logFolder, logFile, strEndCompressFile + " 処理終了");				
				wrFile.WriteLog2File(logFolder, logFile, strEndCompressFile + " =====================");
				// Send mail when finish
				sendMail(SMTPSrv, fromAddr, toAddr, configServerPath + "で正常エクスポート", fileNames, "下記ファイル名が完了しました：", logFolder);
			}
			// ADD: 2019/05/27 - エラーがあればエラー状態で更新し、異常状態に「終了- START
			else{
				wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date()) + " " + "エクスポート処理が異常に終了");
				wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date()) + " =====================");
				sendMail(SMTPSrv, fromAddr, toAddr, configServerPath + "で異常エクスポート", fileNames, "下記ファイル名が完了しません：", logFolder);	
				try {
					updateSQL = "Update bq_exec_logs "												
							+ "SET bqlg_proc_status = 8"						
							+ " WHERE bqlg_daily_date = '" + dailyDate + "'"
							+ " AND bqlg_server_name = '" + configServerPath + "'"
							+ " AND bqlg_file_name = '" + csvFile.substring(0, csvFile.length() - 15) + "'";		
					DBconn.changeData(updateSQL);
					DBconn.closeConnection();
				} catch (SQLException ex) {
				}
			}
			// ADD: 2019/05/27 - END
		} catch ( FileNotFoundException e ) {			
			wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date()) + " " + e.getMessage());
			sendMail(SMTPSrv, fromAddr, toAddr, configServerPath + "で異常エクスポート", fileNames, "下記ファイル名が完了しません：", logFolder);			
		} catch ( XMLStreamException e ) {
			wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date()) + " " + e.getMessage());
			sendMail(SMTPSrv, fromAddr, toAddr, configServerPath + "で異常エクスポート", fileNames, "下記ファイル名が完了しません：", logFolder);
		} 
		catch ( SQLException e ) {			
			try {
				updateSQL = "Update bq_exec_logs "												
						+ "SET bqlg_proc_status = 8"						
						+ " WHERE bqlg_daily_date = '" + dailyDate + "'"
						+ " AND bqlg_server_name = '" + configServerPath + "'"
						+ " AND bqlg_file_name = '" + csvFile.substring(0, csvFile.length() - 15) + "'";		
				DBconn.changeData(updateSQL);
				DBconn.closeConnection();
			} catch (SQLException ex) {
				//ex.printStackTrace(); //削除： 2019/05/27 不要
			}			
			wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date()) + " " + e.getMessage());			
			sendMail(SMTPSrv, fromAddr, toAddr, configServerPath + "で異常エクスポート", fileNames, "下記ファイル名が完了しません：", logFolder);
		}
		catch ( IOException e ) {			
			wrFile.WriteLog2File(logFolder, logFile, frmLogTime.format(new Date()) + " " + e.getMessage());
			sendMail(SMTPSrv, fromAddr, toAddr, configServerPath + "で異常エクスポート", fileNames, "下記ファイル名が完了しません：", logFolder);
		}
	}	
	
	// Send mail
	private static void sendMail(String SMTPSrv, String fromAddr, String toAddr, String subject, List<String> fileCSV, String messages, String fileLog) {
		Properties props = new Properties();
		props.put("mail.smtp.host", SMTPSrv);
		Session session = Session.getInstance(props);
		String fileName = "";
		try {
			Message message = new MimeMessage(session);
			
			message.setFrom(new InternetAddress(fromAddr));			
			message.setRecipients(Message.RecipientType.TO,	InternetAddress.parse(toAddr));
			message.setSubject(subject);
			for (String file: fileCSV ) {
				fileName = "\r\n\t+ " + file + fileName;
			}
			messages = messages + "\r\n" + fileName + "\r\n";
			messages = messages + "\r\n下記のログを確認してください。\r\n\t" + fileLog; 
			message.setText(messages);

			Transport.send(message);
		} catch ( MessagingException e) {
			e.printStackTrace();
		}
	}	
}
